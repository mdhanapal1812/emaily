const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

/** 
 * Fetching the users model
 */
const User = mongoose.model('users');

/**
 * This function will provide the identification piece of cookie for a user(user received from Google strategy)
 */
passport.serializeUser((user, done) => {
    //this user id is the one generated by mongo for every user .. not google id.
    done(null, user.id);
});

/**
 * The incoming requests with cookies are identified by passport and 
 * with the identification token , passport idenfies the user.
 * id - The id that passport.serializeUser sends in the argument.
 */
passport.deserializeUser((id, done) => {
    User.findById(id).then(user => {
        done(null, user);
    })
});

/**
 * Using Google 2.0 , so passing the GoogleStrategy object to Passport service.
 * ClientId and clientSecret are provided to us from GoogleOAuth service (By creating them on Google console.)
 * ClientId : Public Token that identifies the application to Google service.
 * ClientSecret: Private key for the user.
 * Google strategy takes care of all redirects
 */
passport.use(new GoogleStrategy({
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    /** This callback represents where the user will be routed to
     * after the user consents permission
     * for google to access.
     */
    callbackURL: '/auth/google/callback',
    proxy: true
},
    /** At this point after callback we will have access token and user's profile information (email,id, name)*/
    async (accessToken, refereshToken, profile, done) => {

        /** Note this could be put in daos section */
        const existingUser = await User.findOne({ googleId: profile.id });

        /** Existing user might represent one mongoose record or nill if no user record was found*/
        if (existingUser) {
            /** passport need to know that we are finished. So we need to call done.
             * null means no error.
             * 2nd argument is the record.
             */
            return done(null, existingUser);
        }
        /** This is to create a new user instance for this user and save it to database */
        const user = await new User({ googleId: profile.id }).save();
        done(null, user);

    }
));
